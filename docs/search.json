[
  {
    "objectID": "chatlas.html",
    "href": "chatlas.html",
    "title": "chatlas LLM pacakge for Python",
    "section": "",
    "text": "chatlas provides a simple and unified interface across large language model (llm) providers in Python.\n\n#| eval: false\npip3 install -U chatlas\npip3 install -q -U google-genai\npip3 install shiny\npip3 install keyring\n\n\nCode\nfrom chatlas import ChatGoogle,token_usage\nimport keyring\n\n\n\n1 Google gemini\n\n\nCode\nfrom chatlas import ChatGoogle\n\nchat_google_model = ChatGoogle(\n  model = \"gemini-2.0-flash\",\n  api_key=keyring.get_password(\"system\", \"google_ai_api_key\"),\n  system_prompt = \"You are a IT expert\",\n)\n\nchat_google_model\n\n\n&lt;Chat turns=1 tokens=0&gt;\n  &lt;Turn role='system'&gt;\n    &lt;ContentText text='You are a IT expert'&gt;\n\n\n\n\nCode\nresult=chat_google_model.chat(\"What preceding languages most influenced Python?\")\nresult\n\n\n\n\n\n\nPython’s design and features were influenced by a number of preceding languages. Here’s a breakdown of the most significant ones:\n\nABC: This is arguably the most influential language on Python. Guido van Rossum, Python’s creator, worked on the ABC language at the Centrum Wiskunde & Informatica (CWI) in the Netherlands. ABC was designed as a teaching language meant to be easier to use and read than languages like BASIC or Pascal. Python adopted several key features and design philosophies from ABC, including:\n\nEmphasis on readability: ABC prioritized clear syntax and indentation. Python adopted significant indentation to define code blocks, a direct carryover from ABC.\nHigh-level data structures: ABC provided built-in support for data structures like lists and dictionaries, which are also core to Python.\nInteractive interpreter: ABC had an interactive interpreter, which inspired Python’s interactive mode.\nElimination of unnecessary syntax: ABC tried to minimize the number of keywords and special symbols. Python aimed for a similar simplicity.\n\nModula-3: This language influenced Python’s module system, exception handling, and some aspects of object-oriented programming.\nC: Python’s implementation (CPython, the most common implementation) is written in C. C’s influence is seen in:\n\nLow-level memory management: Python relies on C’s memory management capabilities.\nExtension modules: Python can be extended with C modules, allowing it to interface with existing C libraries and improve performance in certain areas.\nSyntax: Some of Python’s syntax, especially in areas like operators and expressions, resembles C.\n\nAlgol 68: This language influenced some of Python’s features.\nSmalltalk: This object-oriented language influenced Python’s object model.\n\nIn Summary:\n\n\n\n\n\n\n\nLanguage\nInfluence\n\n\n\n\nABC\nReadability, indentation, high-level data structures, interactive interpreter, simplicity\n\n\nModula-3\nModule system, exception handling, object-oriented programming\n\n\nC\nImplementation language, memory management, extension modules, some syntax\n\n\nAlgol 68\n\n\n\nSmalltalk\nObject model\n\n\n\nWhile other languages might have had minor influences, ABC, Modula-3, and C were the most important in shaping Python into the language it is today. The influence of ABC is particularly noteworthy because it shaped Python’s core philosophy of readability and ease of use.\n\n\n&lt;chatlas._chat.ChatResponse at 0x119f98c20&gt;\n\n\n\n\n2 Interactive mode\n\n\nCode\n#chat_google_model.app()\n\n\n\n\n3 console mode\n\n\nCode\n#chat_google_model.console()\n\n\n\n\n4 vision\n\n\n5 structured output\n\n\n6 tool calling\n\n\n\n7 reference\nhttps://ellmer.tidyverse.org/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI handbook",
    "section": "",
    "text": "This is a Quarto website.\n\nIn to R\n\n\nR model\n\n\nIn to Python\n\n\nPyhton model"
  },
  {
    "objectID": "chattr.html",
    "href": "chattr.html",
    "title": "chattr interface LLM pacakge for Rstudio/Positron",
    "section": "",
    "text": "chattr is an interface to LLMs (Large Language Models). It enables interaction with the model directly from RStudio and Positron. chattr allows you to submit a prompt to the LLM from your script, or by using the provided Shiny Gadget.\n\n\n1 install package\n\n\nCode\npak::pak(\"mlverse/chattr\")\n\n\n\n\n2 Load package\n\n\nCode\nlibrary(chattr)\n\n\n\n\n3 Use package\n\n\nCode\n#copilot do not need OpenAI_API_KEY\nmy_chat &lt;- ellmer::chat_github(model = \"gpt-4o\")\nchattr_use(my_chat)\n\n\n\n\n4 using LLM as app\n\n\nCode\n#chattr_app()\n\n\n\n\n5 using LLM on code\n\n\nCode\nchattr(\"what is your name?\")\n\n\n# I am an R coding assistant, here to help with tidyverse and tidymodels tasks.\n\n\n\n\nCode\nchattr_history=ch_history()\nprint(chattr_history)\n\n\n\n\n6 save history\n\n\nCode\nchat_file &lt;- tempfile()\nsaveRDS(ch_history(), \"chat_history.rds\")\n\n\n\n\n7 clear history\n\n\nCode\nprint(ch_history(list()))\n\n\n\n\n8 Re-load history\n\n\nCode\nchattr_history=ch_history(readRDS(\"chat_history.rds\"))\nprint(chattr_history)\n\n\n\n\n9 reference\nhttps://mlverse.github.io/chattr/\nhttps://github.com/mlverse/chattr"
  },
  {
    "objectID": "ellmer.html",
    "href": "ellmer.html",
    "title": "ellmer LLM pacakge for R",
    "section": "",
    "text": "ellmer makes it easy to use large language models (LLM) from R. It supports a wide variety of LLM providers and implements a rich set of features including streaming outputs, tool/function calling, structured data extraction, and more.\n\n\n\nCode\n#install.packages(\"ellmer\")\n\n\n\n\nCode\nlibrary(ellmer)\nlibrary(keyring)\n\n\n\n1 Google gemini\n\n\nCode\nchat_gemini_model=chat_google_gemini(\n  system_prompt = NULL,\n  base_url = \"https://generativelanguage.googleapis.com/v1beta/\",\n  api_key = key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  api_args = list(),\n  echo = NULL\n)\n\nchat_gemini_model\n\n\n&lt;Chat Google/Gemini/gemini-2.0-flash turns=0 tokens=0/0 $0.00&gt;\n\n\n\n\nCode\nresult=chat_gemini_model$chat(\"Tell me three jokes about statisticians\")\n\n\nAlright, here are three jokes about statisticians:\n\n1.  **Why did the statistician break up with the mathematician?**\n    Because she said he was mean! (He only dealt with averages.)\n\n2.  **A statistician can have his head in an oven and his feet in ice, and he \nwill say that on average he feels fine.**\n\n3.  **A statistician walks into a bar and orders a beer. The bartender says, \n\"We don't serve statisticians here.\" The statistician replies, \"Oh, that's \nokay. I'll just move on to the next bar. Eventually I'll be served.\"**\n\n\nCode\nresult\n\n\n[1] \"Alright, here are three jokes about statisticians:\\n\\n1.  **Why did the statistician break up with the mathematician?**\\n    Because she said he was mean! (He only dealt with averages.)\\n\\n2.  **A statistician can have his head in an oven and his feet in ice, and he will say that on average he feels fine.**\\n\\n3.  **A statistician walks into a bar and orders a beer. The bartender says, \\\"We don't serve statisticians here.\\\" The statistician replies, \\\"Oh, that's okay. I'll just move on to the next bar. Eventually I'll be served.\\\"**\\n\"\n\n\n\n\n2 Interactive mode\n\n\nCode\n#live_browser(chat_gemini_model)\n\n\n\n\n3 console mode\n\n\nCode\n#live_console(chat_gemini_model)\n\n\n\n\n4 using system prompt\n\n\nCode\nsystem_prompt = \"You are a IT expert\"\nsystem_prompt\n\n\n[1] \"You are a IT expert\"\n\n\n\n\nCode\nchat_gemini_model=chat_google_gemini(\n  system_prompt = system_prompt,\n  base_url = \"https://generativelanguage.googleapis.com/v1beta/\",\n  api_key = key_get(\"google_ai_api_key\"),\n  model = \"gemini-2.0-flash\",\n  api_args = list(),\n  echo = NULL\n)\n\nchat_gemini_model\n\n\n&lt;Chat Google/Gemini/gemini-2.0-flash turns=1 tokens=0/0 $0.00&gt;\n── system [0] ──────────────────────────────────────────────────────────────────\nYou are a IT expert\n\n\n\n\n5 vision\n\n\n6 structured output\n\n\n7 tool calling\n\n\n8 reference\nhttps://ellmer.tidyverse.org/"
  }
]